1. Npx create-react-app [folder-name]
CRA es un boilerplate: hace por nosotras todas las config que tienen su nivel de complejidad para poder ver un proyecto. Incluye webpack, babel, que tienen su grado de complejidad, y permite que nos concentremos en nuestro código.

CRA crea una instancia de git init automáticamente. 

2. Eliminar todo en la carpeta src, excepto por App, index y  serviceWorker (js)

3. npm install react-router-dom
    importar al App file:
        import {BrowserRouter, Route } from 'react-router-dom'
    - como lo deestructuramos, podemos agregarle un alias a cada elemento:
        BrowserRouter as Router

4. Lo que buscamos no es que App nos retorne Home sin procesar nada, sino que App se vuelva el archivo Router, el punto de entrada, que nos sirva diversos containers.
    La mayoría de librerías específicas de react te devuelven componentes, a las que les pasamos props para que hagan cositas.

5. Los componentes se escriben como tags html, pero con mayúscula en la primera letra.
    Puedo usar un componente como un elemento jsx (con sus tags html) o bien como variable dentro de las props de otro componente.    

    ¿Qué componente uso con cierre y cuál con doble elemento? Cuando tiene hijos, lo uso doble. Aunque puedo usarlo siempre.

6. Para agregar rutas de acceso, necesito el componente Router y Route. Dentro de Router, escribiré path y la ruta URL y el componente que quiero que se sirva/retorne (será el container).
    <Route path={'/'} component={Home} />
    Puedo agregar exact path para que busque rutas específicas no modificables. También puedo servir archivos y otras cosas.
    Los componentes que aquí agregue serán los que yo quiero servir como vistas completas, que agrupan un montón de componentes para generar esas vistas (los containers). Manejan un estado propio.

7. Cambio el nombre del componente App a AppRouter y todos los import (en index.js).
    El index.js es la única instancia donde modificaremos el html y el dom de forma tradicional.

8. Componente/Container/Home. 
Es importante guardarlo dentro de su propia carpeta (que le sirva a un container y nada más ese container) para tenerlo bien dividido.

Tiene definido un estado y es un stateful class component:
    - Porque se define como una clase.
    - Porque extiende los comportamientos y métodos de Component que ofrece React.
    - Porque tiene definido un estado (this.state).

    El estado es básicamente el lugar central para la información. Como tal, define cómo está la aplicación (en qué estado se encuentra). Siempre quiero que el estado defina la forma y el momento de mi aplicación. Puedo, además, pasarlo como parámetros (props) a los componentes de la aplicación.
    Como se vea la aplicación idealmente dependerá de cómo tenga el estado en ese momento.
    Es el lugar central e inequívoco donde guardo mis datos. Si modifico ese origen de datos, quiero que modifique toda mi aplicación.
    
    Por lo tanto, podemos usar métodos propios y custom o predeterminados de React.

    El constructor es un método global de todas las clases. Es el método de toda clase que define sus valores iniciales.
    En el caso de los React components, hace falta pasarle al constructor parámetros props para que funcione:
    constructor (props) {cositas}

        El método super, dentro del constructor y en el contexto de clases, hace referencia a lo que está un nivel más arriba y le baje las propiedades que debería heredar para usar esas props.
            super(props)

        Hay varias formas de configurar el state. La más tradicional es utilizar el método constructor, pero la otra es configurarlo de manera directa como "state".

    Props: (o properties) son parámetros. ¿Por qué le decimos props? A la hora de construir interfaces con react, hacemos cachos de vista que se representan como elementos nativos de html, como el header. No obstante, hay muchas más diferencias entre el jsx y html. Por ejemplo, creamos el elemento Header, le damos capacidades y funcionalidad y, al igual que los elementos HTML reciben propiedades (o atributos), por eso les decimos props: son las propiedades que los definen, más que los simples parámetros. Como esas props pueden tener parámetros, les decimos props para no confundirnos.

    Si dentro de un componente, quiero acceder a una prop que estoy pasando desde un container, debo incluir props como parámetro y mencionarlo dentro del componente mismo, como propiedad del objeto props (o bien desestructurado).

    Container: <Header title={'título'}/>
    Componente: const Header (props) => (<div>{props.title}</div>)
     
    Componente: const Header ({title}) => (<div>{title}</div>)


    
    TODO: ¿Por qué algunos métodos llevan punto y otros no? (this.setState vs. componentDidMount o render)

    Dentro del método render() {}, incluimos un Return(cositas) y allí especificamos cada una de las cosas que queremos en pantalla, que van directo al virtual dom. El método render sirve únicamente para React (creemos).

    El estado: 
    Es importante que todos los cambios se reflejen a través del estado, no por referencia. 
    Es mejor tener la información hardcodeada dentro del this.state que en el render () {return()}.
   
    TODO: render() (cositas); render() {return(cositas)}

    ¿Cómo se vuelve stateful un componente? Al definir su estado y los métodos para manejarlo.
        this.state={}

    
    Los class components incluyen el método state que deja indicar cuál es el estado.
        Los functional components no pueden tener o manejar estados o del life cycle, al menos no de la misma manera que se conciben en los class components. Cuando apareció Hooks, nos dio una opción de ofrecerles un estado propio a los functional components.

    Propagación del estado:
    Los functional components no tienen estado propio, sino que reciben props/parámetros que les dice qué información/contenido manejar. El estado que tiene el container se reparte entre cada uno de sus hijos en forma de props.
    En el ejemplo, el único estado definido es title. Quizás se lo quiero pasar al header, o a movies, o a movie-list, todos hijos.

    El estado es un objeto, por lo que deberá desestructurarse a sus propiedades o llamarlas dentro del objeto this.state(.title).
    
    Para pasarlo a nietos, debo pasárselo primero al hijo y después al nieto.

    Cuando quiero modificar el estado, para evitar hacerlo por referencia, agrego la función, por ejemplo changeTitle(newTitle). Ahí el this tendrá un método setState y escribo el nuevo título:
        changeTitle(newTitle) {
            this.state.title = ''
            this.setState({title: newtitle})
        }
    Hay que tener cuidado al hacer setState y modificaciones de estado.  Cuando me equivoco la propiedad que quiero cambiar, por ejemplo, changeTitle(newtitle) pasa a this.setState( subtitle: newtitle), hay ciertas versiones que lo agregan y otras que presuponen que eso es el único estado que queremos poner.

    ¿Por qué usamos this? This hace referencia a "esta clase completa" Es toda la clase Home. Es como si yo escribiera "Home.changeTitle()"
    
    Tenemos un class component, con su estado, con un método que hicimos nosotras, otro método que levantamos en el contexto de react y un botón que hace uso de ese método para cambiar ese estado.     


9. Definir la vista principal y los componentes. Este esquema permite establecer cómo vamos a seguir con el proceso de la app.
    - Header
        - Logo
        - NavBar
    - Search
    - Banner
    - MovieList
        - MovieTitle
        - Movie (componente que se repite x cant de veces)
        - Button

    Las vistas irán dentro de la carpeta containers y los componentes stateless en la carpeta components.

10. Componetización y pasar el estado a los functional components.
    Un functional component es una función que retorna un fragmento de jsx.
    Para colocarlo en el container Home, lo tengo que exportar e importar.
    Por ejemplo, no nos interesa que Header tenga un state, sino pasárselo como parte de sus props.
    Para propagar desde el container hacia cada componente, asigno la prop como si fuera cualquier atributo y dentro tomo la propiedad del objeto state.
    Estamos definiendo un origen de información y lo compartimos con los hijos del componente. Si header consumiera otro componente más y le quiere compartir un cacho del estado, también lo puede hacer, pero con cuidado. Se complica hacerlo disponible. Vamos a ver librerías para ver cómo facilitarlo.

11. Propagación del estado: agregar elemento NavBar.
    - Cuando un functional component solo retornará elementos, no hace falta escribir el return (si es una sola línea).
    Cuando quiero que pasen acciones antes de retornar, escribo específicamente return(cositas) (con los paréntesis) para que haga esa acción y después retorne los elementos.
    - Escribo el componente más pequeño primero y después el que voy a exportar.
    - Como en el estado voy a crear el contenido de cada elemento LI, necesito propagarlo al hijo primero (a través del render y del return de NavBar).
    - Debo usar el método .map porque me retorna cosas (cada elemento).
    - Para que consuma las propiedades, debo reconocer que las props de NavBar serán parte del array, y para que consuma los datos de cada navItem, debo llamar al element en prop (aunque también puedo llamarlo desestructurado), que contendrá las propiedades que me interesan.
    - También puedo llevar NavItems a otro componente por separado.

12. Estilos, SASS y CSS. 
     Normalmente, existe una hoja base de estilos (una definición global con reglas generales) y los componentes tienen pequeñas hojas de estilo que modifican los elementos particulares.

    Para poner sass en Home.js, vamos a crear una hoja de estilos Home.scss (con mayúscula).
    
    ¿Cómo se resuelve sass en el contexto de React?
    Primero, instalamos Sass para el proyecto:
            npm install node-sass

    En el JS, importamos el archivo sass:
    import './Home.scss'

    Con eso basta. No vamos a generar un css, ni correr el script de Sass. La aplicación lo hace automáticamente.

    Nos conviene hacer una ruta commons/sass para aquellos sass que afecten a toda la aplicación.

    Si estamos haciendo una hoja de estilos completa y la tenemos que importar en otra parte, probablemente la estamos bardeando. Si pongo important a un estilo que yo definí, hay algo mal. 

13. Agnostizar: si tengo un sitio con algo demasiado grande escrito, que aparece en un container, me imagino que hay muchos componentes que están en la home y podríamos convertirlo en JSon.
    
    A medida que vamos a complejizando los componentes y sus propios elementos, crearemos sus propias carpetas para que sea más fácil de leer y entender.

14. Fetch
    Vamos a hacer un custom fetch, que nos traerá la api de las películas.
    Normalmente, no vamos a saber de entrada todas las props que va a requerir el nuevo componente Movie, por lo que vamos a tener que estar iterando y reescribiendo, un proceso que es muy normal (y hasta sano).

15. Ciclos iterativos
    Siempre conviene preguntarse: ¿qué es lo mínimo que puede hacer? Hay que manejarse en ciclos iterativos en los que logremos el mínimo viable de ese producto. El dia 1 tira las películas en pantalla. El día 2 las filtra y se ve mejor. El día 3 busca por categoría. El día 4 te busca la string. El día 5 es alta aplicación.

    Si tengo más de niveles de indentación, algo está pasado.

TODO: ¿Atomic Design?


[01-10] 

16. El estado.
    Es la funcionalidad más importante de React.
    ¿Cómo modificamos el estado de un class components?
    Tienen un método propio que reciben al extender la clase component de React, que es this.setState.
    Buena práctica: si tengo funciones que modifican el estado, quiero que sean lo más claras posibles. Recibo el nuevo valor de estado y lo coloco directo.
    Si tengo que hacer varias cosas que cambian, hago una función aparte que organice esa información y luego a la función de modificación le paso eso. Así pondré distintos métodos independientes que organicen datos por distintos motivos y uno solo que se encargue de guardarlos.

    No queremos hacer elementos setState dentro del render, porque ese elemento se dispara muchísimas veces. 

    En el ejemplo con <a> cambia el estado "title" de un componente distinto. 
    Si más de un elemento consume el mismo estado, cuando lo modifique, se modifique en todo lugar que lo referencie.

Si yo quiero que un componente que usa el estado del padre lo modifique, tengo que darle desde el padre la función que me modifique.

17. Props.children
    Es una propiedad de todos los componentes.
    Cuando colocamos contenido dentro de un componente, los componentes reciben una nueva propiedad dentro, que se llama children. Si agrego el texto dentro del container, no se va a visualizar. Cuando envuelvo contenido dentro de un componente, ese contenido pasa al componente bajo el nombre children, como una de sus propiedades, aunque no esté definida en el componentes. Entonces, si yo quiero usarlo, tengo que ir al componente y agergarle props.chldren. 

    Yo puedo colocar dentro de Header el componente NavBar, y de ser así, podemos sumarlo mientras esté la prop children.

    TODO: ¿Siempre hace falta ponerle la props children?

    
    Hay otro escenario con los children.
    Los children pueden son, en esencia, una lista de elementos.

    Dentro de Header, podemos decirle: 
    {children.map((e, i) => <div>holi</div>)}
    
    y van a aparecer directamente en pantalla.

    Así, podemos jugar cómo queremos que se muestren los datos.
    En la medida que queremos sumarle la capacidad de dinamismo, podemos preguntarnos: ¿tengo un solo elemento? ¿o tengo varios?

    Children no está especificada en el container, sino que reaact lo reconoce como un elemento dentro del objeto props, y lo pasa automáticamente como children al elemento stateless.

18. Limpieza:
    Cuando miro el render de un container, solo quiero ver componentes.

    Si uso grids, tags o cosas dentro de un componente, es preferible que lo haga dentro de un componente.
    
    En ciertos casos, conviene que el componente sea agnóstico y no haga mil condicionees sobre cómo se visualiza.

    También cuando hay ul y lis, quizás conviene dejarlo dentro de un mismo componente.


19. AXIOS
    Para hacer fetch.
    Es muy parecida al fetch y permite hacer custom fetches.
    Solo hay que configurar otras cosas.

Como no sabemos cómo va a quedar exacto el estado que queremos, lo que haremos es maquetar como campeonas en el stateful container con un ejemplo.

20. Listas: En vez de que cada propiedad sea una nueva línea de código, que nos obligaba a ponerlo todo aparte, envolverlo y llamarlo, esto es directo. En vez de appendchild por cada li de un UL, llamamos al UL y hacemos un .map para todos los li.

Si tengo una lista de objetos, y cada uno tiene una lista de objetos, es posible que rompa todo a menos que me prepare.

21. Binding.

Un functional component es más performante que un class componente, pero carece de cosas qeu el class tiene: una forma nativa de manejar el estado, un método seguro para editarlo, eventos del ciclo de vida. Solo tiene un equivalente al render en ese return.

Para pasarle una función a un componente funcional desde el class, lo hago sin parámetro para que no se ejecuta. Cuando la quiero ejecutar, desde el functional, le agregamos el parámetro.

Cuando la función viaja al functional y el componente intenta ejecutarla en el evento onclick, tiende a pensar inicialmente que el functional es this. y que el setstate es parte del functional. Por eso se rompe.

¿Cómo lo solucionamos? Con binding.
==> Dentro de la función que quiero vincular al functional, le agrego el método .bind(this). 

La más copada es con la magia de arrow functions. Esto permite bypassear el this.
Si no quiero que se ejecute la función en el class component, se la paso sin paréntesis.

22. Modales.
Hay distintos momentos en los que quiero abrir y cerrar el modal. Como es agnóstica, la función que abre y cierra el modal no va a cambiar, pero el contenido sí. Por eso voy a levantar children, que me va a traer lo que yo quiera dentro del tag modal.
Luego tengo otra propiedad isOpen, que trae datos booleanos. Porque está formulado en ternario. Eso me permite decir si está abierto. 
Hay un evento que dispara el modal Open, pero también quiero poder cerrarlo y cambiar el estado desde el modal. Me conviene llamar una función desde el padre del modal como dentro del modal mismo.


[10-03 01:30]

